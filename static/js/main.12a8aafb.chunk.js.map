{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","App","useState","sortField","setSortField","isReversed","setIsReversed","toRender","initialValue","howToSotr","reverse","sortedGoods","sort","el1","el2","localeCompare","length","action","alphabetClass","classNames","button","lengthClass","reverseClass","resetClass","hiden","className","onClick","type","map","item","ReactDOM","render","document","getElementById"],"mappings":"iPAMaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGWC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAyBA,IAAMC,EAvBN,SAAgBC,EAAcC,EAAWC,GACvC,IAAMC,EAAW,YAAOH,GAIxB,OAAQC,GACN,IAJqB,eAKnBE,EAAYC,MAAK,SAACC,EAAKC,GAAN,OAAcD,EAAIE,cAAcD,MACjD,MACF,IANe,aAObH,EAAYC,MAAK,SAACC,EAAKC,GAAN,OAAcD,EAAIG,OAASF,EAAIE,UAUpD,OAJIN,GACFC,EAAYD,UAGPC,EAGQM,CAAOjB,EAAiBG,EAAWE,GAE9Ca,EAAgBC,IAAW,CAC/BC,QAAQ,EACR,WAAW,EACX,aAA4B,iBAAdjB,KAGVkB,EAAcF,IAAW,CAC7BC,QAAQ,EACR,cAAc,EACd,aAA4B,eAAdjB,KAGVmB,EAAeH,IAAW,CAC9BC,QAAQ,EACR,cAAc,EACd,YAAcf,IAGVkB,EAAaJ,IAAW,CAC5BC,QAAQ,EACR,aAAa,EACb,YAAY,EACZI,QAAuB,KAAdrB,IAAmC,IAAfE,KAG/B,OACE,sBAAKoB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMtB,EAAa,iBAC5BuB,KAAK,SACLF,UAAWP,EAHb,iCASA,wBACEQ,QAAS,kBAAMtB,EAAa,eAC5BuB,KAAK,SACLF,UAAWJ,EAHb,4BAQA,wBACEK,QAAS,kBAAMpB,GAAeD,IAC9BsB,KAAK,SACLF,UAAWH,EAHb,qBAQA,wBACEI,QAAS,WACPtB,EAAa,IACbE,GAAc,IAEhBqB,KAAK,SACLF,UAAWF,EANb,sBAYF,6BACGhB,EAASqB,KAAI,SAAAC,GAAI,OAAI,6BAAgBA,GAAPA,YC/GvCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.12a8aafb.chunk.js","sourcesContent":["\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n\n  function action(initialValue, howToSotr, reverse) {\n    const sortedGoods = [...initialValue];\n    const alphabetically = 'sortAlphabet';\n    const lengthly = 'sortLength';\n\n    switch (howToSotr) {\n      case alphabetically:\n        sortedGoods.sort((el1, el2) => el1.localeCompare(el2));\n        break;\n      case lengthly:\n        sortedGoods.sort((el1, el2) => el1.length - el2.length);\n        break;\n      default:\n        break;\n    }\n\n    if (reverse) {\n      sortedGoods.reverse();\n    }\n\n    return sortedGoods;\n  }\n\n  const toRender = action(goodsFromServer, sortField, isReversed);\n\n  const alphabetClass = classNames({\n    button: true,\n    'is-info': true,\n    'is-light': !(sortField === 'sortAlphabet'),\n  });\n\n  const lengthClass = classNames({\n    button: true,\n    'is-success': true,\n    'is-light': !(sortField === 'sortLength'),\n  });\n\n  const reverseClass = classNames({\n    button: true,\n    'is-warning': true,\n    'is-light': (!isReversed),\n  });\n\n  const resetClass = classNames({\n    button: true,\n    'is-danger': true,\n    'is-light': true,\n    hiden: !(sortField !== '' || isReversed === true),\n  });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField('sortAlphabet')}\n          type=\"button\"\n          className={alphabetClass}\n\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField('sortLength')}\n          type=\"button\"\n          className={lengthClass}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setIsReversed(!isReversed)}\n          type=\"button\"\n          className={reverseClass}\n        >\n          Reverse\n        </button>\n\n        <button\n          onClick={() => {\n            setSortField('');\n            setIsReversed(false);\n          }}\n          type=\"button\"\n          className={resetClass}\n        >\n          Reset\n        </button>\n      </div>\n\n      <ul>\n        {toRender.map(item => <li key={item}>{item}</li>)}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}